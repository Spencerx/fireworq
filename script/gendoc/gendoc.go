package main

import (
	"fmt"
	"os"
	"strings"

	"github.com/fireworq/fireworq/config"
)

func main() {
	if len(os.Args) <= 1 {
		fmt.Fprintln(os.Stderr, "Usage: gendoc <type>")
		os.Exit(1)
	}

	if os.Args[1] == "config" {
		printConfigDoc()
	}
}

func printConfigDoc() {
	fmt.Println(`<!-- DO NOT EDIT: this document is automatically generated by script/gendoc/gendoc.go -->

Configuration
=============

You can configure Fireworq by providing environment variables on
starting a daemon or by specifying command line arguments.  Command
line arguments precede the values of environment variables.

The following variables/arguments are available.`)
	fmt.Println("")

	items := make(configItems, 0)
	for _, d := range config.Descriptions() {
		item := &configItem{d}
		items = append(items, item)
	}

	items.printTableOfContents()
	items.printDescriptions()

	fmt.Print(`
[section-manual-setup]: ./production.md#manual-setup
[section-graceful-restart]: ./production.md#graceful-restart

[api-put-queue]: ./api.md#api-put-queue
[api-put-routing]: ./api.md#api-put-routing
`)
}

type configItems []*configItem

func (items configItems) printTableOfContents() {
	for _, item := range items {
		fmt.Println("- " + item.Link())
	}
}

func (items configItems) printDescriptions() {
	for _, item := range items {
		item.printDescription()
	}
}

type configItem struct {
	config.Item
}

func (item *configItem) printDescription() {
	heading := fmt.Sprintf(
		"### <a name=\"%s\">%s</a>",
		item.AnchorName(),
		item.LinkLabel(),
	)
	fmt.Println(heading)
	if item.DefaultValue != "" {
		fmt.Println(fmt.Sprintf("Default: `%s`", item.DefaultValue))
	}
	fmt.Println(item.Description)
}

func (item *configItem) EnvironmentVariable() string {
	return "FIREWORQ_" + strings.ToUpper(item.Name)
}

func (item *configItem) Link() string {
	return fmt.Sprintf("[%s](#%s)", item.LinkLabel(), item.AnchorName())
}

func (item *configItem) LinkLabel() string {
	return fmt.Sprintf(
		"`%s`, `%s`",
		item.EnvironmentVariable(),
		item.Argument(),
	)
}

func (item *configItem) AnchorName() string {
	return "env-" + strings.Replace(item.Name, "_", "-", -1)
}
